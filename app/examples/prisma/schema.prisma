// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator jsonSchema {
  provider              = "prisma-json-schema-generator"
  includeRequiredFields = "true"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  name      String?
  posts     Post[]    @relation("author") // One-to-many relation
  profile   Profile?  @relation("profile") // One-to-one relation
  birthDate DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  role      Role      @default(USER)
  avatar    String?
  metadata  Json?
}

model Post {
  id         String                 @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String?
  published  Boolean             @default(false)
  author     User                @relation("author", fields: [authorId], references: [id]) // Many-to-one relation
  authorId   String
  categories CategoriesOnPosts[]
  rate       String?
  order      Int                 @default(0)
}

model Profile {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  bio       String?
  user      User?    @relation("profile", fields: [userId], references: [id])
  userId    String?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Category {
  id        String                 @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  posts     CategoriesOnPosts[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now()) @updatedAt
}

model CategoriesOnPosts {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  post       Post     @relation(fields: [postId], references: [id])
  postId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  order      Int      @default(0)
}